name: File Converter CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scan on Sunday

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm test
      
    - name: Build
      run: npm run build
      
    - name: Check bundle size
      run: |
        npm install -g bundlesize
        bundlesize
        
    - name: Run security audit
      run: npm audit --production
      continue-on-error: true  # Don't fail the build, but report issues
      
  test-backend:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
        
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: file_converter_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: './backend/requirements.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 bandit safety
    
    - name: Set up environment
      run: cp .env.example .env
      
    - name: Run linter
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run tests with coverage
      run: pytest --cov=app --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/file_converter_test
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_RESULT_BACKEND: redis://localhost:6379/0
        FLASK_ENV: testing
        JWT_SECRET_KEY: test_secret_key
        UPLOAD_DIR: /tmp/test_uploads
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        fail_ci_if_error: false
        
    - name: Security scanning with Bandit
      run: bandit -r app -f json -o bandit-report.json || true
      
    - name: Check for vulnerabilities in dependencies
      run: safety check --full-report || true
        
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner for Docker images
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run OWASP ZAP baseline scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap/rules.tsv'
        fail_action: false
      if: github.event_name == 'schedule'
        
  build-and-push:
    needs: [test-frontend, test-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: sno7e/file-converter
        tags: |
          type=semver,pattern={{version}}
          type=ref,event=branch
          type=sha,format=long
        
    - name: Build and push backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: sno7e/file-converter-backend:latest,sno7e/file-converter-backend:${{ github.sha }}
        cache-from: type=registry,ref=sno7e/file-converter-backend:latest
        cache-to: type=inline
        
    - name: Build and push frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: sno7e/file-converter-frontend:latest,sno7e/file-converter-frontend:${{ github.sha }}
        cache-from: type=registry,ref=sno7e/file-converter-frontend:latest
        cache-to: type=inline
        build-args: |
          REACT_APP_API_URL=${{ secrets.PRODUCTION_API_URL }}
          REACT_APP_VERSION=${{ github.sha }}
        
  deploy:
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Copy deployment files to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        source: "docker-compose.yml,.env.production"
        target: "/opt/file-converter"
        
    - name: Deploy on server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd /opt/file-converter
          cp .env.production .env
          docker-compose pull
          docker-compose up -d
          docker system prune -af --volumes
          
    - name: Verify deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd /opt/file-converter
          # Wait for services to be healthy
          sleep 30
          # Check if containers are running
          docker-compose ps --services | xargs -I {} docker-compose ps {} | grep "Up"
          # Check API health endpoint
          curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health | grep 200
          
  performance-test:
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up k6
      run: |
        curl -L https://github.com/grafana/k6/releases/download/v0.44.1/k6-v0.44.1-linux-amd64.tar.gz | tar xz
        sudo cp k6-v0.44.1-linux-amd64/k6 /usr/local/bin
        
    - name: Run performance tests
      run: k6 run performance-tests/load-test.js
      env:
        K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
        TARGET_URL: ${{ secrets.PRODUCTION_API_URL }}
          
  notify:
    needs: [deploy, performance-test]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Check job status
      id: check
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" && "${{ needs.performance-test.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "color=good" >> $GITHUB_OUTPUT
          echo "message=Deployment successful! 🚀" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "color=danger" >> $GITHUB_OUTPUT
          echo "message=Deployment failed ❌" >> $GITHUB_OUTPUT
        fi
        
    - name: Send Slack notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: ${{ steps.check.outputs.color }}
        SLACK_TITLE: File Converter Deployment
        SLACK_MESSAGE: |
          *Status:* ${{ steps.check.outputs.message }}
          *Branch:* ${{ github.ref_name }}
          *Commit:* ${{ github.sha }}
          *Deployed by:* ${{ github.actor }}
          *Details:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SLACK_FOOTER: 'Powered by GitHub Actions'
        
    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.MAIL_SERVER }}
        server_port: ${{ secrets.MAIL_PORT }}
        username: ${{ secrets.MAIL_USERNAME }}
        password: ${{ secrets.MAIL_PASSWORD }}
        subject: File Converter Deployment ${{ steps.check.outputs.status }}
        body: |
          The deployment of File Converter to production was ${{ steps.check.outputs.status }}.
          
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Deployed by: ${{ github.actor }}
          
          See details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions 